{"pages":[{"title":"Career","text":"CareerStatistics (2018-12-27 ~ 2019-05-28)사용기술 : SPA, Vue.js, webpack, javascript, Git티켓링크 구단별 판매 데이터 분석 사이트 개발- vue-cli를 사용하여 frontend 프로젝트 셋팅- Vue.js를 사용하여 UI 개발- tui-chart 라이브러리를 사용하여 데이터 시각화 KIOSK (2018-06-11 ~ 2018-08-10)사용기술 : SPA, Vue.js, webpack, javascript, Git티켓링크 현장 발권 시스템 Front 개발- Vue.js를 사용하여 UI 개발- 티켓 출력에 필요한 라이브러리 이전 모바일 보고서 (2018-02-13 ~ 2018-04-04)사용기술 : Springboot, JAVA, AngularJS, jQuery, javascript, mybatis, mysql, Git티켓링크 구단별 판매 현황 및 통계 데이터 시각화- springboot으로 프로젝트 셋팅- backend 개발- frontend 개발- 모바일 웹 티켓링크 사이트 운영 및 추가개발 (2017-12-11 ~ 진행중)사용기술 : Springboot, JAVA, AngularJS, Vue.js, jQuery, javascript, mybatis, mysql, Git티켓링크 admin / front(b2c) 개발 및 운영- MPA로 Vue.js를 이용하여 Front 개발- AngularJS를 이용하여 Front 유지보수 SK플래닛 Big Data Discovery (2016-03-02 ~ 2017-08-04)사용기술 : Springboot, JAVA, JPA, JSP, jQuery, AngularJS(1.x), HalBrowser, Git메타트론 ( 빅데이터 분석 솔루션 )- AngularJS를 이용하여 Front 개발- eChart.js 라이브러리를 사용하여 데이터 시각화 한국언론진흥재단 대외서비스 구축 (2015-01-29 ~ 2016-02-12)사용기술 : JAVA, JEUS, trustForm, javascript, jQuery, MyBatis, svn한국언론진흥재단 admin 개발- 언론인 금고 ( 대출신청, 상환내역 조회 )- 임대 대관 ( 대관 예약 및 일정 조회 ) 삼성닷컴 NextGen 안정화 지원 (2014-10-01 ~ 2015-01-14)사용기술 : JAVA, Spring framework, JSP, javascript, jQuery, iBatis, svn삼성닷컴 운영 및 안정화 지원 삼성닷컴 NextGen B2C Support (2014-08-01 ~ 2014-09-30)사용기술 : JAVA, Spring framework, JSP, javascript, jQuery, iBatis, svn삼성닷컴 Support 페이지 및 만족도 조사 페이지 개발 삼성물산 상사 컴플라이언스 포탈 (2014-05-08 ~ 2014-07-31)사용기술 : JAVA, Spring framework, JSP, javascript, jQuery, MyBatis, svn삼성물산 사내 사이트 개발- DB설계 ( ORACLE )- 삼성물산 포탈 내 설문 등록 및 조회, 참여, 분석 페이지 개발 삼성닷컴 NextGen 구축 PILOT (2013-10-14 ~ 2014-04-17)사용기술 : JAVA, Spring framework, JSP, javascript, jQuery, iBatis, svn삼성닷컴 B2C 개발- 상품 목록 카테고리 및 필터링 조회- AS-IS API 이전","link":"/about/index.html"}],"posts":[{"title":"20201024","text":"블로그를 만들어 보았습니다. 허허…","link":"/2020/10/24/20201024/"},{"title":"Throttle과 Debounce","text":"두 가지 방법 모두 성능상의 이유로 이벤트를 제어(제한)하는 방법이벤트 핸들러가 많은 연산 (예: 무거운 계산, DOM 조작 등)을 수행할할 때, 이벤트가 과도한 횟수로 발생하는 것에 대한 제약을 걸어 제어 Throttle마지막 함수가 호출된 후 일정 시간이 지나기 전에 다시 호출하지 않도록 하는 것일정한 주기마다 이벤트가 발생하도록 하는 것Throttle의 설정시간으로 1ms를 주게되면 이벤트는 1ms동안 최대 한번만 실행normal : event1, event2, event3, event4 ...throttle : event1(1ms)event2(1ms)event3 ... throttle example : // 5초마다 비디오 목록을 조회...initVideo: _.throttle(async function initVideo() { try { const videos = await api.getVideos(); ... } catch (e) { console.error(e); }}, 5000)... Debounce연이어 호출되는 함수들 중 처음 혹은 마지막으로 호출된 함수만 실행하도록 하는 것순차적으로 호출되는 동일한 이벤트를 하나로 그룹화Debounce의 설정시간으로 5ms를 주게되면 5ms동안 이벤트가 호출되지 않아야 마지막 호출 실행normal : event1, event2, event3, event4 ... (전부실행)debounce : event1, event2, event3 (5ms) ... (event3만 실행) debounce example : utils.js;let timer = null;export const debounce = (time, value, search) =&gt; { // time만큼 이벤트가 발생하지 않아야 api 호출 if (timer) { clearTimeout(timer); } timer = setTimeout(() =&gt; { search(value); timer = null; }, time);}; search.jsimport { debounce } from './utils.js'...this.$input.addEventListener('keyup', (e) =&gt; { debounce(500, e.target.value, search);});... Throttle과 Debounce의 차이점가장 큰 차이점은 throttle은 설정한 시간마다 정기적인 실행을 보장하는 것debounce의 경우 아무리 많은 이벤트가 발생한다 하여도 특정 시간동안 이벤트가 발생하지 않았을 때 한번 이벤트를 발생시키는 기법 Ref.쓰로틀링과 디바운싱디바운스(Debounce)와 스로틀(Throttle) 그리고 차이점","link":"/2020/10/25/Throttle%EA%B3%BC-Debounce/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","link":"/2020/10/24/hello-world/"},{"title":"간단한 스크립트 풀이1","text":"Q. 스크립트 실행 시 예상되는 결과는 ? var data1 = &quot;FOO&quot;;function outer() { console.log(data1); var data1 = &quot;BAR&quot;; var data2 = &quot;VAR&quot;; console.log(data2); function inner() { console.log(this.data1); console.log(this.data2); } inner(); return inner;}var obj = { data1: &quot;BAZ&quot;, data2: &quot;TAZ&quot;,};var func = outer();func.call(obj); A. undefined (1)VAR (2)FOO (3)undefined (4)BAZ (5)TAZ (6) 풀이 (1) outer 함수 실행 시, 호이스팅으로 인해 data1 변수에 대해 할당된 undefined 가 출력 function outer() { var data1, data2; console.log(data1); var data1 = &quot;BAR&quot;; var data2 = &quot;VAR&quot;; console.log(data2);} (2) data2에 할당된 VAR가 출력 (3)(4) innner 실행 시 this는 window이기 때문에 window.data1은 undefined, window.data2는 첫 줄에 선언된 FOO가 출력 (5)(6) call로 호출하며 obj를 인자로 전달하였으므로 this는 obj이기 때문에 각 변수값 출력","link":"/2020/10/26/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%92%80%EC%9D%B41/"}],"tags":[{"name":"throttle","slug":"throttle","link":"/tags/throttle/"},{"name":"debounce","slug":"debounce","link":"/tags/debounce/"},{"name":"this","slug":"this","link":"/tags/this/"},{"name":"hoisting","slug":"hoisting","link":"/tags/hoisting/"}],"categories":[{"name":"javascript","slug":"javascript","link":"/categories/javascript/"}]}